function [VM, hrf, C, fit] = Fit_Logit_allstim(V0,t,tc,Run)% [h1, h2, VM] = Fit_logit(RunA, RunB, tc, t)% Fit inverse logit function model to time course% Initial valuesnumstim = length(Run);len = length(Run{1});%V0 = [ 0.5 5 1 0.5 25 -1.5 0.5 50];%V0 = [1 3 1.5 0.5 5 3 15];      LB = [0.05, 1, 0, 0.05, 2.5, 0.05, 4];      % Previous Lower bounds for parametersUB = [5, 5, 2, 2, 7.5, 2, 10];     %LB = [0.05, 1, 0, 0.01, 2.5, 0.05, 3];      % Lower bounds for parameters%UB = [6, 13, 2, 2, 15.5, 3, 18];           % Upper bounds for parametersLB = repmat(LB, 1, numstim);UB = repmat(UB, 1, numstim);% Find optimal values%options = optimset('MaxFunEvals',10000,'Maxiter',10000,'TolX', 1e-4, 'TolFun', 1e-4,'Display','Final');options = optimset('MaxFunEvals',5000,'Maxiter',5000,'TolX', 1e-4, 'TolFun', 1e-4,'Display','off');%VM = fminsearch(@msq_timecourse,V02,options,t,tc,RunA,RunB,RunC );VM = fminsearchbnd(@cost_allstim, V0, LB,UB,options,t,tc,Run);% Use optimal values to fit hemodynamic response functionshrf =zeros(length(t),numstim);fitt = zeros(len,numstim);for g = 1:numstim    hrf(:,g) = Get_Logit(VM(g*7-6:g*7),t);                   % Calculate HRF estimate (fit, given theta)endfor g = 1:numstim    fits(:,g) = conv(Run{g}, hrf(:,g));    fitt(:,g) = fits(1:len,g);end    fit = sum(fitt,2);    C = sum((fit-tc).^2);return;