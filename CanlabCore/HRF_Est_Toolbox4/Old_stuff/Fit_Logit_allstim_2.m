function [VM, hrf, fit] = Fit_Logit_allstim_2(V0,tc,tr, Run, down)% Fit inverse logit function model to time course % Multi-condition case%% Last edited by ML on 02/12/13%% INPUTS:% % V0 - Initial values for IL-model% tc - time course data% tr - TR% Run - a cell array containing stick functions (one for each condition)% down - downsampling factor%% OUTPUTS:%% VM - final parameter values for IL-model% hrf - estimated HRFs for each condition% fit - estimated time course% Initial valuesnumstim = length(Run);len = length(Run{1});LB = [0.05, 1, 0, 0.05, 5, 0.05, 8];      % Previous Lower bounds for parametersUB = [2 10, 2, 2, 15, 1, 20];     % LB = [0.05, 1, 0, 0.05, 5, 0.05, 8, 0];      % Previous Lower bounds for parameters% UB = [2 10, 5, 2, 15, 1, 20, 5];     LB = repmat(LB, 1, numstim);UB = repmat(UB, 1, numstim);V0 = repmat(V0,1,numstim);% Find optimal values%options = optimset('MaxFunEvals',10000,'Maxiter',10000,'TolX', 1e-4, 'TolFun', 1e-4,'Display','Final');options = optimset('MaxFunEvals',100000,'Maxiter',100000,'TolX', 1e-8, 'TolFun', 1e-8,'Display','off');%VM = fminsearch(@msq_timecourse,V02,options,t,tc,RunA,RunB,RunC );VM = fminsearchbnd(@cost_allstim_2, V0, LB, UB, options,tr,tc,Run,down);% Use optimal values to fit hemodynamic response functionst=0:(1/down):30;hrf =zeros(length(t),numstim);fitt = zeros(len,numstim);for g = 1:numstim    hrf(:,g) = Get_Logit(VM(g*7-6:g*7),t);                   % Calculate HRF estimate (fit, given theta)endfor g = 1:numstim    fits(:,g) = conv(Run{g}, hrf(:,g));    fitt(:,g) = fits(1:len,g);endfit = sum(fitt,2);return;