function gen_noise_text_from_R(noise_mat, formats, varargin)
    % gen_noise_text_from_R extracts the R matrix from a noise.mat file generated by SPM
    % and writes it to a text file suitable for use as confounds in FSL or AFNI.
    %
    % Usage:
    %   gen_noise_text_from_R('noise.mat', 'FSL')
    %   gen_noise_text_from_R('noise.mat', {'FSL', 'AFNI'}, 'outdir', '/path/to/output')
    %
    % Inputs:
    %   noise_mat - String, path to the SPM noise.mat file.
    %   formats - A char or cell array of chars specifying the output formats.
    %             Acceptable formats are 'FSL', 'AFNI'.
    %   varargin - Variable input arguments:
    %       'outdir' - A string specifying the output directory path. Default is the current directory.
    %
    % Outputs:
    %   Writes the R matrix to text files formatted for specified software use in the directory specified.
    %
    % 05/07/2024 Michael Sun, Ph.D.

    % Parse input arguments
    p = inputParser;
    addRequired(p, 'noise_mat', @ischar);
    addRequired(p, 'formats', @(x) ischar(x) || iscellstr(x));
    addParameter(p, 'outdir', pwd, @ischar); % Default output directory
    parse(p, noise_mat, formats, varargin{:});

    % Assign parsed inputs to variables
    outdir = p.Results.outdir;

    % Check if the noise matrix file exists
    if ~exist(noise_mat, 'file')
        error('The specified noise .mat file does not exist.');
    end

    % Load the noise matrix file
    loaded_data = load(noise_mat);
    if ~isfield(loaded_data, 'R')
        error('The loaded .mat file does not contain an R matrix.');
    end
    R = loaded_data.R;

    % Ensure the output directory exists
    if ~exist(outdir, 'dir')
        mkdir(outdir);
    end

    % Check formats and set flags
    if ischar(formats)
        formats = {formats};  % Convert to cell array if only one format is provided
    end

    % Write the R matrix to file according to specified formats
    for format = formats
        switch format{1}  % Unpack the cell
            case 'FSL'
                outfile = fullfile(outdir, 'confounds_fsl.txt');
                dlmwrite(outfile, R, 'delimiter', '\t');
                fprintf('FSL confounds file created at %s\n', outfile);
            case 'AFNI'
                outfile = fullfile(outdir, 'confounds_afni.1D');
                dlmwrite(outfile, R, 'delimiter', ' ');
                fprintf('AFNI confounds file created at %s\n', outfile);
        end
    end
end